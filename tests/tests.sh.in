#!/bin/sh

# The original files for comparisons already exist in the source repo.
# For regression, run the tools again and compare.

LANG=C	# consistent sort

# This requires two tools from dnstable.
DNSTABLE_LOOKUP=${DNSTABLE_LOOKUP:-dnstable_lookup}
DNSTABLE_DUMP=${DNSTABLE_DUMP:-dnstable_dump}

DNSTABLE_CONVERT=@abs_top_builddir@/dnstable_convert
DNSTABLE_UNCONVERT=@abs_top_builddir@/dnstable_unconvert

exitcode=0

echo Create a dnstable mtbl file with SRV and SOA records and make sure
echo it works for forward rrset and reverse rdata dumps and a rdata name
echo lookup.

rm -f @abs_builddir@/srv_soa.dns.mtbl

# strip system info from dnstable_convert output
strip_env_info()
{
  REAL_USER_ID=`id -ur`
  EFFECTIVE_USER_ID=`id -u`
  DIR=@abs_top_builddir@
  sed -E -e "s; merged in [0-9]+\.[0-9][0-9] sec, [0-9,]+ msg\/sec, [0-9,]+ ent\/sec, fd=[0-9]+$; merged in 0.00 sec, 27,879 msg/sec, 167,275 ent/sec, fd=4;" \
       -e "s; entries in [0-9]+\.[0-9][0-9] sec, [0-9,]+ ent\/sec (\[dns.*\])$; entries in 0.00 sec, 130,240 ent/sec \1;" \
      -e "s/^fd-limit: soft=[0-9]+, hard=[0-9]+$/fd-limit: soft=1234, hard=1234/" \
      -e "/^fd-limit: Updated soft-limit/,+1 d" \
      -e "s/^Host: [[:print:]]+/Host: hostname/" \
      -e "s/^Kernel: [[:print:]]+ [[:print:]]+ .*$/Kernel: sysname machine release version/" \
      -e "s/^Run by: UID=${REAL_USER_ID} EUID=${EFFECTIVE_USER_ID}/Run by: UID=1000 EUID=1000/" \
      -e "s;^Start dir: ${DIR};Start dir: /build/dir;" \
      -e "s/^Start: .*$/Start: Mon Jun  5 12:58:30 2023/"
}

echo -n "dnstable_convert of a SRV and SOA record set to mtbl: "
# NOTE: no DNSSEC records so the dnssec file will be created and removed
# strip off the timing for comparison
$DNSTABLE_CONVERT @abs_srcdir@/srv_soa.dnsdedupe.nmsg @abs_builddir@/srv_soa.dns.mtbl foo.dnssec.mtbl 2>&1 | strip_env_info | sort -f > @abs_builddir@/dnstable_convert.output1.tmp
cmp -s @abs_srcdir@/dnstable_convert.output1 @abs_builddir@/dnstable_convert.output1.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "verify SRV and SOA record set from rrset dump: "
$DNSTABLE_DUMP -r @abs_builddir@/srv_soa.dns.mtbl > @abs_builddir@/dnstable_dump.rrset.output1.tmp
cmp -s @abs_srcdir@/dnstable_dump.rrset.output1 @abs_builddir@/dnstable_dump.rrset.output1.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "verify SRV and SOA record set from rdata dump: "
$DNSTABLE_DUMP -d @abs_builddir@/srv_soa.dns.mtbl > @abs_builddir@/dnstable_dump.rdata.output1.tmp
cmp -s @abs_srcdir@/dnstable_dump.rdata.output1 @abs_builddir@/dnstable_dump.rdata.output1.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "verify SRV record set works for rdata lookup: "
DNSTABLE_FNAME=@abs_builddir@/srv_soa.dns.mtbl $DNSTABLE_LOOKUP rdata name "*.example.net." SRV > @abs_builddir@/dnstable_lookup.rdata.name.srv.output1.tmp 2>&1
cmp -s @abs_srcdir@/dnstable_lookup.rdata.name.srv.output1 @abs_builddir@/dnstable_lookup.rdata.name.srv.output1.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "verify SOA record set works for rdata lookup: "
DNSTABLE_FNAME=@abs_builddir@/srv_soa.dns.mtbl $DNSTABLE_LOOKUP rdata name "*.icann.org" SOA > @abs_builddir@/dnstable_lookup.rdata.name.soa.output1.tmp 2>&1
cmp -s @abs_srcdir@/dnstable_lookup.rdata.name.soa.output1 @abs_builddir@/dnstable_lookup.rdata.name.soa.output1.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

# https://github.com/farsightsec/dnstable-convert/pull/1
echo
echo Testing with a broken dnstable MTBL file previously generated
echo with dnstable_convert 0.9.1 without the SRV fix.
echo The broken MTBL data should work for dumps but not a rdata name lookup.

echo -n "verify broken SRV record set from rrset dump: "
$DNSTABLE_DUMP -r @abs_srcdir@/broken-srv_soa.dns.mtbl > @abs_builddir@/dnstable_dump.rrset.output2.tmp
# compare with original file
cmp -s @abs_srcdir@/dnstable_dump.rrset.output1 @abs_builddir@/dnstable_dump.rrset.output2.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "verify broken SRV record set from rdata dump: "
$DNSTABLE_DUMP -d @abs_srcdir@/broken-srv_soa.dns.mtbl > @abs_builddir@/dnstable_dump.rdata.output2.tmp
result=0
# compare with original file
cmp -s @abs_srcdir@/dnstable_dump.rdata.output1 @abs_builddir@/dnstable_dump.rdata.output2.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "verify broken SRV record set does NOT work for rdata lookup: "
DNSTABLE_FNAME=@abs_srcdir@/broken-srv_soa.dns.mtbl $DNSTABLE_LOOKUP rdata name "*.example.net." SRV > @abs_builddir@/dnstable_lookup.rdata.name.srv.output2.tmp 2>&1
result=0
# it should not match
cmp -s @abs_srcdir@/dnstable_lookup.rdata.name.output1 @abs_builddir@/dnstable_lookup.rdata.name.srv.output2.tmp && result=1
grep "Dumped 0 entries" @abs_builddir@/dnstable_lookup.rdata.name.srv.output2.tmp >/dev/null || result=1
if [ "$result" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "verify broken SOA record set does NOT work for rdata lookup: "
DNSTABLE_FNAME=@abs_srcdir@/broken-srv_soa.dns.mtbl $DNSTABLE_LOOKUP rdata name "*.icann.org." SOA > @abs_builddir@/dnstable_lookup.rdata.name.soa.output2.tmp 2>&1
result=0
# it should not match
cmp -s @abs_srcdir@/dnstable_lookup.rdata.name.output1 @abs_builddir@/dnstable_lookup.rdata.name.soa.output2.tmp && result=1
grep "Dumped 0 entries" @abs_builddir@/dnstable_lookup.rdata.name.soa.output2.tmp >/dev/null || result=1
if [ "$result" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo
echo Test dnstable_unconvert sorts output rdata values.
echo The dnstable_convert rdata retains unsorted input.
echo The dnstable_unconvert rdata will be sorted.
# Mimics wdns_sort_rrset which sorts rdata values with shorter
# lengths before longer lengths, and within the same length sorts
# byte-lexically. This occurs in wire format, so the MX targets will
# sort in increasing length of hostname, and within the same length,
# increasing preference.

rm -f @abs_builddir@/unordered-rdata.dnsdedupe.dns.mtbl

echo -n "dnstable_convert of an unsorted A and MX record set to mtbl: "
$DNSTABLE_CONVERT @abs_srcdir@/unordered-rdata.dnsdedupe.json.nmsg @abs_builddir@/unordered-rdata.dnsdedupe.dns.mtbl foo.dnssec.mtbl 2>&1 | strip_env_info | sort -f > @abs_builddir@/dnstable_convert.output2.tmp
cmp -s @abs_srcdir@/dnstable_convert.output2 @abs_builddir@/dnstable_convert.output2.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "verify unsorted A and MX record sets from rrset dump: "
$DNSTABLE_DUMP -r @abs_builddir@/unordered-rdata.dnsdedupe.dns.mtbl > @abs_builddir@/dnstable_dump.rrset.output3.tmp
cmp -s @abs_srcdir@/dnstable_dump.rrset.output3 @abs_builddir@/dnstable_dump.rrset.output3.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "verify A and MX record sets from rdata dump: "
$DNSTABLE_DUMP -d @abs_builddir@/unordered-rdata.dnsdedupe.dns.mtbl > @abs_builddir@/dnstable_dump.rdata.output3.tmp
cmp -s @abs_srcdir@/dnstable_dump.rdata.output3 @abs_builddir@/dnstable_dump.rdata.output3.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

rm -f @abs_builddir@/ordered-rdata.dnsdedupe.dns.nmsg

echo -n "dnstable_unconvert of an A and MX record set from mtbl to nmsg: "
$DNSTABLE_UNCONVERT @abs_builddir@/unordered-rdata.dnsdedupe.dns.mtbl @abs_builddir@/ordered-rdata.dnsdedupe.dns.nmsg 2>&1 | sed -E -e "s;^processed 2 RRSets in [0-9]+\.[0-9][0-9] sec, [0-9,]+ rrsets/sec$;processed 2 RRSets in 0.00 sec, 24997 rrsets/sec;" -e "s;^Reading RRSets from @abs_builddir@/unordered-rdata.dnsdedupe.dns.mtbl into nmsg file @abs_builddir@/ordered-rdata.dnsdedupe.dns.nmsg$;Reading RRsets from unordered-rdata.dnsdedupe.dns.mtbl into nmsg file ordered-rdata.dnsdedupe.dns.nmsg;" | sort -f > @abs_builddir@/dnstable_unconvert.output1.tmp
cmp -s @abs_srcdir@/dnstable_unconvert.output1 @abs_builddir@/dnstable_unconvert.output1.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

# Now make sure that the new nmsg file has the sorted rdata.
# Instead of using nmsgtool as a dependency
# just use dnstable_convert again and dnstable_dump again.

rm -f @abs_builddir@/ordered-rdata.dnsdedupe.dns.mtbl @abs_builddir@/ordered-rdata.dnsdedupe.dnssec.mtbl

echo -n "dnstable_convert of sorted A and MX record set to mtbl: "
$DNSTABLE_CONVERT -p @abs_builddir@/ordered-rdata.dnsdedupe.dns.nmsg @abs_builddir@/ordered-rdata.dnsdedupe.dns.mtbl @abs_builddir@/ordered-rdata.dnsdedupe.dnssec.mtbl 2>&1 | strip_env_info | sort -f > @abs_builddir@/dnstable_convert.output3.tmp
cmp -s @abs_srcdir@/dnstable_convert.output3 @abs_builddir@/dnstable_convert.output3.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "confirm dnstable_convert -p leaves dnssec mtbl file with no records: "
$DNSTABLE_DUMP -r @abs_builddir@/ordered-rdata.dnsdedupe.dnssec.mtbl > @abs_builddir@/dnstable_dump.rrset.output4.tmp 2>&1
if [ ! -s "@abs_builddir@/dnstable_dump.rrset.output4.tmp" ]; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

echo -n "verify sorted A and MX record sets from rrset dump: "
$DNSTABLE_DUMP -r @abs_builddir@/ordered-rdata.dnsdedupe.dns.mtbl > @abs_builddir@/dnstable_dump.rrset.output5.tmp
cmp -s @abs_srcdir@/dnstable_dump.rrset.output5 @abs_builddir@/dnstable_dump.rrset.output5.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

# this rdata dump is sorted already
# so compare it with sorted template 3 already used previously
echo -n "verify A and MX record sets from rdata dump: "
$DNSTABLE_DUMP -d @abs_builddir@/ordered-rdata.dnsdedupe.dns.mtbl > @abs_builddir@/dnstable_dump.rdata.output4.tmp
cmp -s @abs_srcdir@/dnstable_dump.rdata.output3 @abs_builddir@/dnstable_dump.rdata.output4.tmp
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

threaded="@abs_builddir@/threaded.dns.mtbl.tmp"
unthreaded="@abs_builddir@/unthreaded.dns.mtbl.tmp"

rm -f $threaded
rm -f $unthreaded

# mtbl version 1.7.0 introduced the -t THREADCOUNT and -b BLOCKSIZE options for
# the mtbl_merge utility.  The following 3 test cases check that both options
# work as intended.

echo -n "verify dnstable_convert -t option does not change output: "
$DNSTABLE_CONVERT -t 10 @abs_builddir@/ordered-rdata.dnsdedupe.dns.nmsg $threaded @abs_builddir@/threaded.dnssec.mtbl 2>&1 | strip_env_info | sort -f > @abs_builddir@/dnstable_convert.output4.tmp
$DNSTABLE_CONVERT @abs_builddir@/ordered-rdata.dnsdedupe.dns.nmsg $unthreaded @abs_builddir@/unthreaded.dnssec.mtbl 2>&1 | strip_env_info | sort -f > @abs_builddir@/dnstable_convert.output5.tmp
cmp -s $threaded $unthreaded
if [ "$?" -eq 0 ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

# File names used for the 2 test cases below.
new_dns_blocksize="@abs_builddir@/new_blocksize.dns.mtbl.tmp"
new_dnssec_blocksize="@abs_builddir@/new_blocksize.dnssec.mtbl.tmp"
dns_blocksize="@abs_builddir@/blocksize.dns.mtbl.tmp"
dnssec_blocksize="@abs_builddir@/blocksize.dnssec.mtbl.tmp"

rm -f $new_dns_blocksize
rm -f $new_dnssec_blocksize
rm -f $dns_blocksize
rm -f $dnssec_blocksize

echo -n "verify dnstable_convert -b option modifies output DNS block size: "
$DNSTABLE_CONVERT -b 256 @abs_builddir@/ordered-rdata.dnsdedupe.dns.nmsg $new_dns_blocksize $new_dnssec_blocksize 2>&1 | strip_env_info | sort -f > @abs_builddir@/dnstable_convert.output6.tmp
$DNSTABLE_CONVERT @abs_builddir@/ordered-rdata.dnsdedupe.dns.nmsg $dns_blocksize $dnssec_blocksize 2>&1 | strip_env_info | sort -f > @abs_builddir@/dnstable_convert.output7.tmp
cmp -s $new_dns_blocksize $dns_blocksize
if [ "$?" -eq 1 -a -s $new_dns_blocksize -a -s $dns_blocksize -a ! -f $new_dnssec_blocksize -a ! -f $dnssec_blocksize ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

# Remove these files so we can reuse them below.
rm -f $new_dns_blocksize
rm -f $dns_blocksize

echo -n "verify dnstable_convert -b option modifies output DNSSEC block size: "
$DNSTABLE_CONVERT -b 256,256 @abs_builddir@/dnssec.nmsg $new_dns_blocksize $new_dnssec_blocksize 2>&1 | strip_env_info | sort -f > @abs_builddir@/dnstable_convert.output6.tmp
$DNSTABLE_CONVERT @abs_builddir@/dnssec.nmsg $dns_blocksize $dnssec_blocksize 2>&1 | strip_env_info | sort -f > @abs_builddir@/dnstable_convert.output7.tmp
cmp -s $new_dnssec_blocksize $dnssec_blocksize
if [ "$?" -eq 1 -a -s $new_dnssec_blocksize -a -s $dnssec_blocksize -a ! -f $new_dns_blocksize -a ! -f $dns_blocksize ] ; then
  echo PASS
else
  echo FAIL
  exitcode=1
fi

rm -f @abs_builddir@/*.tmp
rm -f @abs_builddir@/ordered-rdata.dnsdedupe.dns.mtbl
rm -f @abs_builddir@/ordered-rdata.dnsdedupe.dns.nmsg
rm -f @abs_builddir@/ordered-rdata.dnsdedupe.dnssec.mtbl
rm -f @abs_builddir@/unordered-rdata.dnsdedupe.dns.mtbl

exit $exitcode
